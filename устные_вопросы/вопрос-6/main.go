// Есть ли в Go перегрузка методов или операторов?

// Нет, в Go нет поддержки перегрузки методов или операторов, как в некоторых других языках программирования.
// В Go каждое имя метода или оператора должно быть уникальным в рамках типа данных.

// Однако Go позволяет объявлять методы с одинаковым именем, но разными приемниками (receiver).
// Приемник определяет тип данных, для которого объявляется метод. Различные методы с одним и тем же именем,
// но разными приемниками, могут существовать в одном пакете. Это называется методами с одинаковыми именами,
// но разными типами приемников.
package main

import (
	"fmt"
	"math"
)

type Rectangle struct {
	width, height float64
}

type Circle struct {
	radius float64
}

// Методы с одинаковым именем, но разными приемниками
func (r Rectangle) Area() float64 {
	return r.width * r.height
}

func (c Circle) Area() float64 {
	return math.Pi * c.radius * c.radius
}

func main() {
	r := Rectangle{width: 4, height: 5}
	fmt.Println("Площадь прямоугольника", r.Area())

	c := Circle{radius: 3}
	fmt.Printf("Площадь круга: %.2f", c.Area())

}

// Как видно в примере выше, Rectangle и Circle имеют методы с одинаковым именем Area(),
// но разными типами приемников. Это позволяет вызывать метод Area() для соответствующего типа данных.
