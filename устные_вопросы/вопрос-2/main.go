// Что такое интерфейсы, как они применяются в Go?
// Интерфейсы в Go представляют собой коллекцию методов. Они определяют набор методов, к
// оторые должны быть реализованы любым типом, чтобы удовлетворить этот интерфейс.
// Интерфейсы в Go обеспечивают полиморфизм, что означает возможность использовать разные типы данных,
// реализующие один и тот же интерфейс, через общий набор методов.
package main

type Writer interface {
	Write(data []byte) (int, error)
}

// В этом примере интерфейс Writer определяет единственный метод Write,
// который принимает срез байт и возвращает количество записанных байт и ошибку.

// Для реализации интерфейса в Go, тип должен реализовать все методы, указанные в интерфейсе.
// Например, вот тип File с методом Write, который удовлетворяет интерфейсу Writer:
type File struct {
	// поля файла
}

func (f *File) Write(data []byte) (int, error) {
	// реализация записи в файл
}

// Теперь, объект типа File может быть использован везде,
// где требуется объект, реализующий интерфейс Writer. Например:
func main() {
	var w Writer
	file := &File{} // создание объекта типа File

	w = file // присваивание объекта типа File интерфейсной переменной

	w.Write([]byte("Hello, World!")) // вызов метода Write через интерфейсную переменную
}

// Использование интерфейсов позволяет писать гибкий и расширяемый код в Go.
// Он позволяет абстрагироваться от конкретных типов данных и работать с объектами через общие методы,
// что упрощает проектирование и повышает повторное использование кода.
