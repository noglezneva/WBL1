//Реализовать быструю сортировку массива (quicksort) встроенными методами
//языка.

package main

import "fmt"

// Функция для обмена элементов в массиве
func swap(arr []int, i, j int) {
	arr[i], arr[j] = arr[j], arr[i]
}

// Функция для разделения массива на подмассивы и выбора опорного элемента
func partition(arr []int, low, high int) int {
	// В качестве опорного элемента выбираем последний элемент массива
	pivot := arr[high]
	// Индекс для хранения позиции опорного элемента после разделения
	i := low - 1

	// Проходим по массиву и переставляем элементы
	// так, чтобы все элементы меньше опорного оказались слева от него,
	// а все элементы больше опорного – справа от него
	for j := low; j < high; j++ {
		if arr[j] < pivot {
			i++
			swap(arr, i, j)
		}
	}

	// Помещаем опорный элемент в правильную позицию
	swap(arr, i+1, high)

	// Возвращаем индекс опорного элемента
	return i + 1
}

// Функция быстрой сортировки
func quickSort(arr []int, low, high int) {
	if low < high {
		// Разделяем массив на подмассивы и получаем индекс опорного элемента
		pivot := partition(arr, low, high)

		// Рекурсивно сортируем подмассивы перед и после опорного элемента
		quickSort(arr, low, pivot-1)
		quickSort(arr, pivot+1, high)
	}
}

func main() {
	// Пример использования
	arr := []int{9, 5, 7, 1, 3}
	fmt.Println("Исходный массив:", arr)

	// Вызов функции быстрой сортировки
	quickSort(arr, 0, len(arr)-1)

	fmt.Println("Отсортированный массив:", arr)
}
