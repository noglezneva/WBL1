// Дана последовательность чисел: 2,4,6,8,10.
//Найти сумму их квадратов с использованием конкурентных вычислений.

package main

import (
	"fmt"
	"sync"
)

func main() {
	numbers := []int{2, 4, 6, 8, 10}

	// Создаем WaitGroup для ожидания завершения всех горутин
	var wg sync.WaitGroup

	// Создаем канал для передачи результатов вычислений из горутин в основной поток
	//каждая горутина будет вычислять квадрат числа и отправляет его в канал
	resultCh := make(chan int)

	// Запускаем горутину для каждого числа
	for _, num := range numbers {
		wg.Add(1)
		go func(x int) {
			defer wg.Done()

			//вычисляем квадрат числа
			square := x * x

			//отправляем результат в канал
			resultCh <- square
		}(num)
	}

	//запускаем горутину для суммирования результатов
	//Она ожидает завершения всех горутин с помощью WaitGroup и после этого закрывает канал
	go func() {
		wg.Wait()
		close(resultCh)
	}()
	// Суммируем квадраты числе из канала
	sum := 0
	for square := range resultCh {
		sum += square
	}

	// Выводим сумму квадратов чисел
	fmt.Println("Сумма квадратов:", sum)

}
